import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        //classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath 'org.codehaus.groovy:groovy-all:2.4.15'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'


version = "0.3.0.101-1.18.2"
group = "com.tac"
archivesBaseName = "tac-a"

//name = "tac-a-0.3.0.44-1.16.5"
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets.main.resources { srcDir 'src/generated/resources' }

/*jarJar.enable()*/

/*configurations {
    shadow {
        minecraftLibrary.extendsFrom shadow
    }
}*/

mixin {
    add sourceSets.main, "tac.refmap.json"
    config "tac.mixins.json"
}

minecraft {

    mappings channel: 'parchment', version: '2022.11.06-1.18.2'

    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.disableRefMap', 'true'
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                tac {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'mixin.env.disableRefMap', 'true'
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                tac {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'mixin.env.disableRefMap', 'true'
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'tac', '--all', '--output', file('src/generated/resources/')
            mods {
                tac {
                    source sourceSets.main
                }
            }
        }
    }
}

processResources {
    doLast {
        fileTree(dir: outputs.files.asPath, include: "**/*.json").each {
            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.2-40.1.85'
    //implementation fg.deobf('curse.maven:obfuscate-289380:3169369')
    //implementation fg.deobf('curse.maven:obfuscate-289380:3336021') // 3740120') // 3336021
    //implementation fg.deobf('curse.maven:chisel-and-bits-231095:3593643')
    //implementation fg.deobf('curse.maven:flashlight-addon-227874:3381556')
    implementation fg.deobf('curse.maven:framework-549225:3723144')
    //implementation fg.deobf('curse.maven:extra-player-render-481042:3305584')

    //implementation 'com.google.code.gson:gson:2.9.0'
    /*implementation(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.4') {
        jarJar.ranged(it, "[2.0,3.0)")
    }*/

    minecraftLibrary 'com.fasterxml.jackson.core:jackson-databind:2.12.4'
    //jarJar 'com.fasterxml.jackson.core:jackson-databind:[2.12.4]'
    //jarJar(group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '[2.0,3.0)')

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}
/*repositories {
    maven { url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        url = "https://www.cursemaven.com"
    }
}*/
repositories {
    mavenCentral()
    maven { url = 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}
jar {
    manifest {
        attributes([
            "Specification-Title": "Timeless and Classics",
            "Specification-Vendor": "ClumsyAlien",
            "Specification-Version": "0.04",
            "Implementation-Title": "Timeless and Classics",
            "Implementation-Version": project.version,
            "Implementation-Vendor" : "ClumsyAliwen",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

/*
tasks {
    tasks.jarJar {
        //from(project.configurations.jarJar.collect({ zipTree(it) }))
        manifest {
            attributes([
                    "Automatic-Module-Name": "tac.a",
                    "FMLModType": "LIBRARY"
            ])
        }
    }

    assemble {
        dependsOn(tasks.jarJar)
    }
}
*/

/*def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}*/
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

shadowJar {
    dependencies {
        include(dependency("com.fasterxml.jackson.core:jackson-databind:2.12.4"))
        include(dependency("com.fasterxml.jackson.core:jackson-annotations:2.12.4"))
        include(dependency("com.fasterxml.jackson.core:jackson-core:2.12.4"))
    }
}

reobf {
    shadowJar {} // Re-obfuscate the shadowed JAR
}

jar.finalizedBy('reobfJar')
shadowJar.finalizedBy('reobfShadowJar')

publish.dependsOn('reobfJar')
publish.dependsOn('reobfShadowJar')
